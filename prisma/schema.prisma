datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("account")
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       Int

    @@map("session")
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtoken")
}

model User {
    id             Int            @id @default(autoincrement())
    name           String?        @default("User")
    email          String?        @unique
    emailVerified  DateTime?
    image          String?        @default("https://avatars.dicebear.com/api/open-peeps/imggggg.svg")
    createdAt      DateTime       @default(now())
    onboardingDone Boolean        @default(false)
    updatedAt      DateTime       @updatedAt
    Account        Account[]
    Session        Session[]
    Organization   Organization[]

    @@map("users")
}

model Organization {
    id            Int  @id @default(autoincrement())
    userId        Int
    user          User @relation(fields: [userId], references: [id])
    walletBalance Int  @default(100)

    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    Transaction         Transaction[]
    ImageAnalysisRecord ImageAnalysisRecord[]
    VideoAnalysisRecord VideoAnalysisRecord[]
    TextAnalysisRecord  TextAnalysisRecord[]

    @@map("organization")
}

enum AnalysisStatus {
    PROCESSING
    PROCESSED
}

enum ContentType {
    IMAGE
    VIDEO
    TEXT
    AUDIO
}

model ImageAnalysisRecord {
    id             Int          @id @default(autoincrement())
    s3Key          String
    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])
    results        Json
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@map("imageanalysisrecord")
}

model VideoAnalysisRecord {
    id             Int          @id @default(autoincrement())
    s3Key          String
    jobId          String
    results        Json?
    status         String
    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@unique([jobId])
    @@map("videoanalysisrecord")
}

model TextAnalysisRecord {
    id             Int          @id @default(autoincrement())
    text           String
    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])
    results        Json
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@map("textanalysisrecord")
}

model Transaction {
    id             Int          @id @default(autoincrement())
    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])
    amount         Int
    initialBalance Int
    finalBalance   Int
    orderId        String
    transactionId  String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@map("transaction")
}
