datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

generator client {
    provider = "prisma-client-js"
}

model Organization {
    id            Int    @id @default(autoincrement())
    name          String
    email         String @unique
    password      String
    walletBalance Float  @default(100)

    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    Transaction         Transaction[]
    ImageAnalysisRecord ImageAnalysisRecord[]
    VideoAnalysisRecord VideoAnalysisRecord[]
    TextAnalysisRecord  TextAnalysisRecord[]
    ApiKeys             ApiKeys[]

    @@map("organization")
}

enum AnalysisStatus {
    PROCESSING
    PROCESSED
}

enum ContentType {
    IMAGE
    VIDEO
    TEXT
    AUDIO
}

model ImageAnalysisRecord {
    id             Int          @id @default(autoincrement())
    s3Key          String
    s3Url          String       @default("")
    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])
    results        Json
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@map("imageanalysisrecord")
}

model VideoAnalysisRecord {
    id             Int          @id @default(autoincrement())
    s3Key          String
    s3Url          String       @default("")
    jobId          String
    results        Json?
    status         String
    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@unique([jobId])
    @@map("videoanalysisrecord")
}

model TextAnalysisRecord {
    id             Int          @id @default(autoincrement())
    text           String
    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])
    results        Json
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@map("textanalysisrecord")
}

model Transaction {
    id             Int          @id @default(autoincrement())
    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])
    amount         Int
    initialBalance Int
    finalBalance   Int
    orderId        String
    transactionId  String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@map("transaction")
}

model ApiKeys {
    id             Int          @id @default(autoincrement())
    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])
    accessKey      String
    accessSecret   String
    usageCount     Int          @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([organizationId, accessKey])
    @@map("apikeys")
}
